.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_pac_plot_compare_normalizations.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pac_plot_compare_normalizations.py:


======================
Compare normalizations
======================

The normalization correspond on the method used to correct the PAC estimation
with the chance distribution.



.. image:: /auto_examples/pac/images/sphx_glr_plot_compare_normalizations_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -> Normalization using No normalization
    -> Normalization using Substract the mean of surrogates
    -> Normalization using Divide by the mean of surrogates
    -> Normalization using Substract then divide by the mean of surrogates
    -> Normalization using Substract the mean and divide by the deviation of the surrogates





|


.. code-block:: default

    from __future__ import print_function
    import matplotlib.pyplot as plt
    from tensorpac import Pac
    from tensorpac.signals import pac_signals_wavelet
    plt.style.use('seaborn-paper')

    # First, we generate a dataset of signals artificially coupled between 10hz
    # and 100hz. By default, this dataset is organized as (n_epochs, n_times) where
    # n_times is the number of time points.
    n_epochs = 10  # number of datasets
    sf = 512.  # sampling frequency
    data, time = pac_signals_wavelet(sf=sf, f_pha=10, f_amp=100, noise=1.,
                                     n_epochs=n_epochs, n_times=2000)

    # First, let's use the MVL, without any further correction by surrogates :
    p = Pac(f_pha=(5, 16, 1, .1), f_amp=(80, 130, 5, 2))

    # Now, we want to compare PAC methods, hence it's useless to systematically
    # filter the data. So we extract the phase and the amplitude only once :
    phases = p.filter(sf, data, ftype='phase', n_jobs=1)
    amplitudes = p.filter(sf, data, ftype='amplitude', n_jobs=1)

    plt.figure(figsize=(18, 9))
    for i, k in enumerate(range(5)):
        # Change the pac method :
        p.idpac = (1, 2, k)
        print('-> Normalization using ' + p.str_norm)
        # Compute only the PAC without filtering :
        xpac = p.fit(phases, amplitudes, n_perm=20)
        # Plot :
        plt.subplot(2, 3, k + 1)
        p.comodulogram(xpac.mean(-1), title=p.str_norm, cmap='Spectral_r')

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.829 seconds)


.. _sphx_glr_download_auto_examples_pac_plot_compare_normalizations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_compare_normalizations.py <plot_compare_normalizations.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_compare_normalizations.ipynb <plot_compare_normalizations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
