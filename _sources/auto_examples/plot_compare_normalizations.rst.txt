

.. _sphx_glr_auto_examples_plot_compare_normalizations.py:


=========================================
Compare the several normalization methods
=========================================

The normalization correspond on the method used to correct the PAC estimation
with the chance distribution.




.. image:: /auto_examples/images/sphx_glr_plot_compare_normalizations_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    -> Normalization using No normalization
    -> Normalization using Substract the mean of surrogates
    -> Normalization using Divide by the mean of surrogates
    -> Normalization using Substract then divide by the mean of surrogates
    -> Normalization using Substract the mean and divide by the deviation of the surrogates




|


.. code-block:: python

    from __future__ import print_function
    import matplotlib.pyplot as plt
    from tensorpac.utils import pac_signals_wavelet
    from tensorpac import Pac
    plt.style.use('seaborn-paper')

    # First, we generate a dataset of signals artificially coupled between 10hz
    # and 100hz. By default, this dataset is organized as (ntrials, npts) where
    # npts is the number of time points.
    n = 3  # number of datasets
    sf = 512.  # sampling frequency
    data, time = pac_signals_wavelet(sf=sf, fpha=10, famp=100, noise=1., ntrials=n,
                                     npts=2000)

    # First, let's use the MVL, without any further correction by surrogates :
    p = Pac(fpha=(5, 16, 1, .1), famp=(80, 130, 5, 2), dcomplex='wavelet',
            width=12)

    # Now, we want to compare PAC methods, hence it's useless to systematically
    # filter the data. So we extract the phase and the amplitude only once :
    phases = p.filter(sf, data, axis=1, ftype='phase')
    amplitudes = p.filter(sf, data, axis=1, ftype='amplitude')

    plt.figure(figsize=(18, 9))
    for i, k in enumerate(range(5)):
        # Change the pac method :
        p.idpac = (1, 4, k)
        print('-> Normalization using ' + p.norm)
        # Compute only the PAC without filtering :
        xpac = p.fit(phases, amplitudes, axis=2, nperm=100)
        # Plot :
        plt.subplot(2, 3, k + 1)
        p.comodulogram(xpac.mean(-1), title=p.norm, cmap='Spectral_r')

    plt.show()

**Total running time of the script:** ( 0 minutes  10.354 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_compare_normalizations.py <plot_compare_normalizations.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_compare_normalizations.ipynb <plot_compare_normalizations.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
