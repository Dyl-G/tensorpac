.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_pac_methods.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_pac_methods.py:


===================
Compare PAC methods
===================

Compute PAC on multiple datasets and compare implemented methods.



.. image:: /auto_examples/images/sphx_glr_plot_pac_methods_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -> PAC using Mean Vector Length (MVL, Canolty et al. 2006)
    -> PAC using Kullback-Leiber Distance (KLD, Tort et al. 2010)
    -> PAC using Heights ratio (HR, Lakatos et al. 2005)
    -> PAC using ndPac (Ozkurt et al. 2012)
    -> PAC using Phase-Synchrony (Cohen et al. 2008; Penny et al. 2008)
    -> PAC using Gaussian Copula PAC (Ince et al. 2017)





|


.. code-block:: default

    from __future__ import print_function
    import matplotlib.pyplot as plt
    from tensorpac import Pac, pac_signals_tort
    plt.style.use('seaborn-paper')

    # First, we generate a dataset of signals artificially coupled between 10hz
    # and 100hz. By default, this dataset is organized as (n_epochs, n_times) where
    # n_times is the number of time points.
    n_epochs = 10  # number of datasets
    sf = 512.  # sampling frequency
    n_times = 4000  # Number of time points
    data, time = pac_signals_tort(sf=sf, f_pha=5, f_amp=100, noise=2.,
                                  n_epochs=n_epochs, n_times=n_times)

    # First, let's use the MVL, without any further correction by surrogates :
    p = Pac(f_pha=(2, 20, 1, 1), f_amp=(60, 150, 5, 5))

    # Now, we want to compare PAC methods, hence it's useless to systematically
    # filter the data. So we extract the phase and the amplitude only once :
    phases = p.filter(sf, data, ftype='phase')
    amplitudes = p.filter(sf, data, ftype='amplitude')

    plt.figure(figsize=(18, 9))
    for i, k in enumerate([1, 2, 3, 4, 5, 6]):
        # Change the pac method :
        p.idpac = (k, 0, 0)
        print('-> PAC using ' + str(p))
        # Compute only the PAC without filtering :
        xpac = p.fit(phases, amplitudes)
        # Plot :
        plt.subplot(2, 3, k)
        p.comodulogram(xpac.mean(-1), title=p.method, cmap='Spectral_r')

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.180 seconds)


.. _sphx_glr_download_auto_examples_plot_pac_methods.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_pac_methods.py <plot_pac_methods.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_pac_methods.ipynb <plot_pac_methods.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
