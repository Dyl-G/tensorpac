.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_stats_plot_compare_cond_cluster.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_stats_plot_compare_cond_cluster.py:


========================================================================
Compare PAC of two experimental conditions with cluster-based statistics
========================================================================

This example illustrates how to statistically compare the phase-amplitude
coupling results coming from two experimental conditions. In particular, the
script below a the cluster-based approach to correct for the multiple
comparisons.

In order to work, this script requires MNE-Python package to be installed in
order to perform the cluster-based correction
(:func:`mne.stats.permutation_cluster_test`)


.. code-block:: default

    import numpy as np

    from tensorpac import Pac
    from tensorpac.signals import pac_signals_wavelet

    from mne.stats import permutation_cluster_test

    import matplotlib.pyplot as plt








Simulate the data coming from two experimental conditions
##############################################################################
 Let's start by simulating data coming from two experimental conditions. The
 first dataset is going to simulate a 10hz phase <-> 120hz amplitude
 coupling while the second dataset will not include any coupling (random data)


.. code-block:: default


    # create the first dataset with a 10hz <-> 100hz coupling
    n_epochs = 30   # number of datasets
    sf = 512.       # sampling frequency
    n_times = 4000  # Number of time points
    x_1, time = pac_signals_wavelet(sf=sf, f_pha=10, f_amp=120, noise=2.,
                                 n_epochs=n_epochs, n_times=n_times)
    # create a second random dataset without any coupling
    x_2 = np.random.rand(n_epochs, n_times)







Compute the single trial PAC on both datasets
##############################################################################
 once the datasets created, we can now extract the PAC, computed across
 time-points for each trials and across several phase and amplitude
 frequencies


.. code-block:: default


    # create the pac object. Use the Gaussian-Copula PAC
    p = Pac(idpac=(6, 0, 0), f_pha='hres', f_amp='hres', dcomplex='wavelet')
    # compute pac for both dataset
    pac_1 = p.filterfit(sf, x_1, n_jobs=-1)
    pac_2 = p.filterfit(sf, x_2, n_jobs=-1)







Correct for multiple-comparisons using a cluster-based approach
##############################################################################
 Then, we perform the cluster-based correction for multiple comparisons
 between the PAC coming from the two conditions. To this end we use the
 Python package MNE-Python and in particular, the function
 :func:`mne.stats.permutation_cluster_test`


.. code-block:: default


    # mne requires that the first is represented by the number of trials (n_epochs)
    # Therefore, we transpose the output PACs of both conditions
    pac_r1 = np.transpose(pac_1, (2, 0, 1))
    pac_r2 = np.transpose(pac_2, (2, 0, 1))

    n_perm = 1000  # number of permutations
    tail = 1       # only inspect the upper tail of the distribution
    # perform the correction
    t_obs, clusters, cluster_p_values, h0 = permutation_cluster_test(
        [pac_r1, pac_r2], n_permutations=n_perm, tail=tail)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using a threshold of 4.006873
    stat_fun(H1): min=0.000001 max=55.496230
    Running initial clustering
    Found 11 clusters
    Permuting 999 times...
      0%|          |  : 0/999 [00:00<?,       ?it/s]      2%|1         |  : 19/999 [00:00<00:01,  559.99it/s]      4%|3         |  : 38/999 [00:00<00:01,  560.09it/s]      6%|5         |  : 56/999 [00:00<00:01,  558.44it/s]      8%|7         |  : 76/999 [00:00<00:01,  560.05it/s]     10%|#         |  : 101/999 [00:00<00:01,  566.91it/s]     12%|#2        |  : 123/999 [00:00<00:01,  570.62it/s]     15%|#4        |  : 146/999 [00:00<00:01,  575.27it/s]     17%|#7        |  : 173/999 [00:00<00:01,  583.44it/s]     20%|#9        |  : 196/999 [00:00<00:01,  587.55it/s]     22%|##1       |  : 217/999 [00:00<00:01,  589.08it/s]     24%|##3       |  : 239/999 [00:00<00:01,  591.70it/s]     26%|##6       |  : 264/999 [00:00<00:01,  597.70it/s]     29%|##8       |  : 286/999 [00:00<00:01,  600.16it/s]     30%|###       |  : 304/999 [00:00<00:01,  596.39it/s]     32%|###2      |  : 321/999 [00:00<00:01,  590.89it/s]     34%|###3      |  : 339/999 [00:00<00:01,  587.69it/s]     36%|###5      |  : 357/999 [00:00<00:01,  584.63it/s]     38%|###7      |  : 375/999 [00:00<00:01,  581.64it/s]     40%|###9      |  : 395/999 [00:00<00:01,  582.09it/s]     43%|####2     |  : 427/999 [00:00<00:00,  593.55it/s]     46%|####6     |  : 460/999 [00:00<00:00,  605.43it/s]     49%|####9     |  : 490/999 [00:00<00:00,  615.22it/s]     52%|#####1    |  : 519/999 [00:00<00:00,  624.01it/s]     54%|#####3    |  : 539/999 [00:00<00:00,  622.24it/s]     57%|#####7    |  : 572/999 [00:00<00:00,  633.69it/s]     60%|######    |  : 603/999 [00:00<00:00,  643.60it/s]     63%|######3   |  : 633/999 [00:00<00:00,  652.56it/s]     66%|######6   |  : 663/999 [00:00<00:00,  661.36it/s]     69%|######9   |  : 692/999 [00:00<00:00,  668.99it/s]     72%|#######2  |  : 721/999 [00:01<00:00,  676.47it/s]     76%|#######5  |  : 755/999 [00:01<00:00,  687.72it/s]     79%|#######8  |  : 786/999 [00:01<00:00,  696.43it/s]     82%|########1 |  : 817/999 [00:01<00:00,  704.89it/s]     85%|########4 |  : 849/999 [00:01<00:00,  713.98it/s]     87%|########7 |  : 873/999 [00:01<00:00,  713.76it/s]     90%|######### |  : 902/999 [00:01<00:00,  719.76it/s]     93%|#########3|  : 931/999 [00:01<00:00,  725.59it/s]     96%|#########6|  : 963/999 [00:01<00:00,  734.16it/s]    100%|#########9|  : 995/999 [00:01<00:00,  742.49it/s]    100%|##########|  : 999/999 [00:01<00:00,  754.77it/s]
    Computing cluster p-values
    Done.



Plot the significant clusters
##############################################################################
 Finally, we plot the significant clusters. To this end, we used an elegant
 solution proposed by MNE where the non significant part appears using a
 gray scale colormap while significant clusters are going to be color coded.


.. code-block:: default



    # create new stats image with only significant clusters
    t_obs_plot = np.nan * np.ones_like(t_obs)
    for c, p_val in zip(clusters, cluster_p_values):
        if p_val <= 0.001:
            t_obs_plot[c] = t_obs[c]
            t_obs[c] = np.nan

    title = 'Cluster-based corrected differences\nbetween cond 1 and 2'
    p.comodulogram(t_obs, cmap='gray', colorbar=False)
    p.comodulogram(t_obs_plot, cmap='viridis', title=title)
    plt.gca().invert_yaxis()
    plt.show()



.. image:: /auto_examples/stats/images/sphx_glr_plot_compare_cond_cluster_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.331 seconds)


.. _sphx_glr_download_auto_examples_stats_plot_compare_cond_cluster.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_compare_cond_cluster.py <plot_compare_cond_cluster.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_compare_cond_cluster.ipynb <plot_compare_cond_cluster.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
