.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_stats_plot_compare_cond_cluster.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_stats_plot_compare_cond_cluster.py:


========================================================================
Compare PAC of two experimental conditions with cluster-based statistics
========================================================================

This example illustrates how to statistically compare the phase-amplitude
coupling results coming from two experimental conditions. In particular, the
script below a the cluster-based approach to correct for the multiple
comparisons.

In order to work, this script requires MNE-Python package to be installed in
order to perform the cluster-based correction
(:func:`mne.stats.permutation_cluster_test`)


.. code-block:: default

    import numpy as np

    from tensorpac import Pac
    from tensorpac.signals import pac_signals_wavelet

    from mne.stats import permutation_cluster_test

    import matplotlib.pyplot as plt








Simulate the data coming from two experimental conditions
##############################################################################
 Let's start by simulating data coming from two experimental conditions. The
 first dataset is going to simulate a 10hz phase <-> 120hz amplitude
 coupling while the second dataset will not include any coupling (random data)


.. code-block:: default


    # create the first dataset with a 10hz <-> 100hz coupling
    n_epochs = 30   # number of datasets
    sf = 512.       # sampling frequency
    n_times = 4000  # Number of time points
    x_1, time = pac_signals_wavelet(sf=sf, f_pha=10, f_amp=120, noise=2.,
                                 n_epochs=n_epochs, n_times=n_times)
    # create a second random dataset without any coupling
    x_2 = np.random.rand(n_epochs, n_times)







Compute the single trial PAC on both datasets
##############################################################################
 once the datasets created, we can now extract the PAC, computed across
 time-points for each trials and across several phase and amplitude
 frequencies


.. code-block:: default


    # create the pac object. Use the Gaussian-Copula PAC
    p = Pac(idpac=(6, 0, 0), f_pha='hres', f_amp='hres', dcomplex='wavelet')
    # compute pac for both dataset
    pac_1 = p.filterfit(sf, x_1, n_jobs=-1)
    pac_2 = p.filterfit(sf, x_2, n_jobs=-1)







Correct for multiple-comparisons using a cluster-based approach
##############################################################################
 Then, we perform the cluster-based correction for multiple comparisons
 between the PAC coming from the two conditions. To this end we use the
 Python package MNE-Python and in particular, the function
 :func:`mne.stats.permutation_cluster_test`


.. code-block:: default


    # mne requires that the first is represented by the number of trials (n_epochs)
    # Therefore, we transpose the output PACs of both conditions
    pac_r1 = np.transpose(pac_1, (2, 0, 1))
    pac_r2 = np.transpose(pac_2, (2, 0, 1))

    n_perm = 1000  # number of permutations
    tail = 1       # only inspect the upper tail of the distribution
    # perform the correction
    t_obs, clusters, cluster_p_values, h0 = permutation_cluster_test(
        [pac_r1, pac_r2], n_permutations=n_perm, tail=tail)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using a threshold of 4.006873
    stat_fun(H1): min=0.000003 max=72.081383
    Running initial clustering
    Found 15 clusters
    Permuting 999 times...
      0%|          |  : 0/999 [00:00<?,       ?it/s]      3%|3         |  : 32/999 [00:00<00:01,  930.17it/s]      7%|6         |  : 66/999 [00:00<00:00,  933.60it/s]     10%|#         |  : 101/999 [00:00<00:00,  938.27it/s]     13%|#3        |  : 134/999 [00:00<00:00,  940.09it/s]     17%|#6        |  : 169/999 [00:00<00:00,  944.46it/s]     20%|##        |  : 203/999 [00:00<00:00,  947.35it/s]     24%|##3       |  : 236/999 [00:00<00:00,  948.75it/s]     27%|##7       |  : 270/999 [00:00<00:00,  951.51it/s]     30%|###       |  : 304/999 [00:00<00:00,  954.16it/s]     34%|###3      |  : 337/999 [00:00<00:00,  955.33it/s]     37%|###7      |  : 371/999 [00:00<00:00,  957.78it/s]     40%|####      |  : 404/999 [00:00<00:00,  958.65it/s]     44%|####3     |  : 438/999 [00:00<00:00,  960.85it/s]     47%|####7     |  : 472/999 [00:00<00:00,  963.09it/s]     51%|#####     |  : 506/999 [00:00<00:00,  965.11it/s]     54%|#####4    |  : 540/999 [00:00<00:00,  967.05it/s]     57%|#####7    |  : 574/999 [00:00<00:00,  968.98it/s]     61%|######    |  : 608/999 [00:00<00:00,  970.57it/s]     64%|######4   |  : 642/999 [00:00<00:00,  972.32it/s]     68%|######7   |  : 676/999 [00:00<00:00,  973.92it/s]     71%|#######1  |  : 710/999 [00:00<00:00,  975.55it/s]     74%|#######4  |  : 744/999 [00:00<00:00,  977.12it/s]     78%|#######7  |  : 778/999 [00:00<00:00,  978.60it/s]     81%|########1 |  : 812/999 [00:00<00:00,  980.02it/s]     85%|########4 |  : 845/999 [00:00<00:00,  979.91it/s]     88%|########7 |  : 879/999 [00:00<00:00,  981.20it/s]     91%|#########1|  : 913/999 [00:00<00:00,  982.34it/s]     95%|#########4|  : 946/999 [00:00<00:00,  982.12it/s]     98%|#########8|  : 980/999 [00:00<00:00,  983.35it/s]    100%|##########|  : 999/999 [00:00<00:00,  986.35it/s]    100%|##########|  : 999/999 [00:00<00:00,  999.96it/s]
    Computing cluster p-values
    Done.



Plot the significant clusters
##############################################################################
 Finally, we plot the significant clusters. To this end, we used an elegant
 solution proposed by MNE where the non significant part appears using a
 gray scale colormap while significant clusters are going to be color coded.


.. code-block:: default



    # create new stats image with only significant clusters
    t_obs_plot = np.nan * np.ones_like(t_obs)
    for c, p_val in zip(clusters, cluster_p_values):
        if p_val <= 0.001:
            t_obs_plot[c] = t_obs[c]
            t_obs[c] = np.nan

    title = 'Cluster-based corrected differences\nbetween cond 1 and 2'
    p.comodulogram(t_obs, cmap='gray', colorbar=False)
    p.comodulogram(t_obs_plot, cmap='viridis', title=title)
    plt.gca().invert_yaxis()
    plt.show()



.. image:: /auto_examples/stats/images/sphx_glr_plot_compare_cond_cluster_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.442 seconds)


.. _sphx_glr_download_auto_examples_stats_plot_compare_cond_cluster.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_compare_cond_cluster.py <plot_compare_cond_cluster.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_compare_cond_cluster.ipynb <plot_compare_cond_cluster.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
