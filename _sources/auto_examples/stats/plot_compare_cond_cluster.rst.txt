.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_stats_plot_compare_cond_cluster.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_stats_plot_compare_cond_cluster.py:


========================================================================
Compare PAC of two experimental conditions with cluster-based statistics
========================================================================

This example illustrates how to statistically compare the phase-amplitude
coupling results coming from two experimental conditions. In particular, the
script below a the cluster-based approach to correct for the multiple
comparisons.

In order to work, this script requires MNE-Python package to be installed in
order to perform the cluster-based correction
(:func:`mne.stats.permutation_cluster_test`)


.. code-block:: default

    import numpy as np

    from tensorpac import Pac
    from tensorpac.signals import pac_signals_wavelet

    from mne.stats import permutation_cluster_test

    import matplotlib.pyplot as plt








Simulate the data coming from two experimental conditions
##############################################################################
 Let's start by simulating data coming from two experimental conditions. The
 first dataset is going to simulate a 10hz phase <-> 120hz amplitude
 coupling while the second dataset will not include any coupling (random data)


.. code-block:: default


    # create the first dataset with a 10hz <-> 100hz coupling
    n_epochs = 30   # number of datasets
    sf = 512.       # sampling frequency
    n_times = 4000  # Number of time points
    x_1, time = pac_signals_wavelet(sf=sf, f_pha=10, f_amp=120, noise=2.,
                                 n_epochs=n_epochs, n_times=n_times)
    # create a second random dataset without any coupling
    x_2 = np.random.rand(n_epochs, n_times)







Compute the single trial PAC on both datasets
##############################################################################
 once the datasets created, we can now extract the PAC, computed across
 time-points for each trials and across several phase and amplitude
 frequencies


.. code-block:: default


    # create the pac object. Use the Gaussian-Copula PAC
    p = Pac(idpac=(6, 0, 0), f_pha='hres', f_amp='hres', dcomplex='wavelet')
    # compute pac for both dataset
    pac_1 = p.filterfit(sf, x_1, n_jobs=-1)
    pac_2 = p.filterfit(sf, x_2, n_jobs=-1)







Correct for multiple-comparisons using a cluster-based approach
##############################################################################
 Then, we perform the cluster-based correction for multiple comparisons
 between the PAC coming from the two conditions. To this end we use the
 Python package MNE-Python and in particular, the function
 :func:`mne.stats.permutation_cluster_test`


.. code-block:: default


    # mne requires that the first is represented by the number of trials (n_epochs)
    # Therefore, we transpose the output PACs of both conditions
    pac_r1 = np.transpose(pac_1, (2, 0, 1))
    pac_r2 = np.transpose(pac_2, (2, 0, 1))

    n_perm = 1000  # number of permutations
    tail = 1       # only inspect the upper tail of the distribution
    # perform the correction
    t_obs, clusters, cluster_p_values, h0 = permutation_cluster_test(
        [pac_r1, pac_r2], n_permutations=n_perm, tail=tail)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using a threshold of 4.006873
    stat_fun(H1): min=0.000000 max=80.980205
    Running initial clustering
    Found 16 clusters
    Permuting 999 times...
      0%|          |  : 0/999 [00:00<?,       ?it/s]      1%|1         |  : 14/999 [00:00<00:02,  407.45it/s]      4%|4         |  : 42/999 [00:00<00:02,  418.00it/s]      7%|6         |  : 68/999 [00:00<00:02,  427.77it/s]      8%|8         |  : 83/999 [00:00<00:02,  428.40it/s]     11%|#1        |  : 110/999 [00:00<00:02,  438.45it/s]     14%|#3        |  : 135/999 [00:00<00:01,  447.56it/s]     15%|#5        |  : 150/999 [00:00<00:01,  447.29it/s]     18%|#8        |  : 180/999 [00:00<00:01,  458.61it/s]     20%|##        |  : 204/999 [00:00<00:01,  466.84it/s]     22%|##1       |  : 219/999 [00:00<00:01,  465.53it/s]     25%|##5       |  : 250/999 [00:00<00:01,  477.20it/s]     27%|##7       |  : 273/999 [00:00<00:01,  484.41it/s]     29%|##8       |  : 289/999 [00:00<00:01,  483.72it/s]     32%|###2      |  : 321/999 [00:00<00:01,  495.81it/s]     34%|###4      |  : 343/999 [00:00<00:01,  501.80it/s]     36%|###5      |  : 358/999 [00:00<00:01,  498.30it/s]     39%|###9      |  : 391/999 [00:00<00:01,  510.76it/s]     41%|####1     |  : 411/999 [00:00<00:01,  514.24it/s]     43%|####2     |  : 427/999 [00:00<00:01,  511.88it/s]     46%|####6     |  : 460/999 [00:00<00:01,  524.35it/s]     48%|####8     |  : 480/999 [00:00<00:00,  527.27it/s]     50%|####9     |  : 498/999 [00:00<00:00,  527.32it/s]     53%|#####3    |  : 531/999 [00:00<00:00,  539.75it/s]     55%|#####5    |  : 550/999 [00:00<00:00,  540.84it/s]     57%|#####6    |  : 566/999 [00:00<00:00,  536.75it/s]     60%|######    |  : 600/999 [00:00<00:00,  549.54it/s]     62%|######1   |  : 617/999 [00:00<00:00,  546.88it/s]     64%|######3   |  : 635/999 [00:00<00:00,  545.99it/s]     67%|######6   |  : 668/999 [00:00<00:00,  558.31it/s]     69%|######8   |  : 685/999 [00:01<00:00,  555.23it/s]     70%|#######   |  : 704/999 [00:01<00:00,  555.39it/s]     74%|#######3  |  : 737/999 [00:01<00:00,  567.65it/s]     75%|#######5  |  : 753/999 [00:01<00:00,  562.07it/s]     77%|#######7  |  : 774/999 [00:01<00:00,  564.62it/s]     81%|########  |  : 807/999 [00:01<00:00,  576.78it/s]     82%|########2 |  : 822/999 [00:01<00:00,  568.10it/s]     84%|########4 |  : 844/999 [00:01<00:00,  571.60it/s]     88%|########7 |  : 877/999 [00:01<00:00,  583.69it/s]     89%|########9 |  : 892/999 [00:01<00:00,  574.49it/s]     91%|#########1|  : 914/999 [00:01<00:00,  577.75it/s]     95%|#########4|  : 946/999 [00:01<00:00,  589.24it/s]     96%|#########6|  : 961/999 [00:01<00:00,  579.48it/s]     98%|#########8|  : 983/999 [00:01<00:00,  582.49it/s]    100%|##########|  : 999/999 [00:01<00:00,  677.35it/s]
    Computing cluster p-values
    Done.



Plot the significant clusters
##############################################################################
 Finally, we plot the significant clusters. To this end, we used an elegant
 solution proposed by MNE where the non significant part appears using a
 gray scale colormap while significant clusters are going to be color coded.


.. code-block:: default



    # create new stats image with only significant clusters
    t_obs_plot = np.nan * np.ones_like(t_obs)
    for c, p_val in zip(clusters, cluster_p_values):
        if p_val <= 0.001:
            t_obs_plot[c] = t_obs[c]
            t_obs[c] = np.nan

    title = 'Cluster-based corrected differences\nbetween cond 1 and 2'
    p.comodulogram(t_obs, cmap='gray', colorbar=False)
    p.comodulogram(t_obs_plot, cmap='viridis', title=title)
    plt.gca().invert_yaxis()
    plt.show()



.. image:: /auto_examples/stats/images/sphx_glr_plot_compare_cond_cluster_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.368 seconds)


.. _sphx_glr_download_auto_examples_stats_plot_compare_cond_cluster.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_compare_cond_cluster.py <plot_compare_cond_cluster.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_compare_cond_cluster.ipynb <plot_compare_cond_cluster.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
